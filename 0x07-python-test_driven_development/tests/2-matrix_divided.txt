
===============================
 How to Use 2-matrix_divided.py
===============================

This library is very simple, since it only has one function called
``matrix_divided()``.

Numbers
=======

``matrix_divided()`` returns the divided value of its argument (a matrix).
For numbers, pos or neg, that value is equivalent to using the ``/`` operator.

::

    >>> from 2-matrix_divided import matrix_divided
    >>> matrix = [
    [1, 2, 3],
    [4, 5, 6]
    ]
    >>> my_function(matrix)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    [[1, 2, 3], [4, 5, 6]]

It also works with floating-point values.

::

    >>> my_function(float(matrix))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    [[1, 2, 3], [4, 5, 6]]

Non-Numbers
===========

Because ``/`` is not  defined on data types other than numbers,
``matrix_divided()`` will not work if one of the arguments is a
string, a list, or a tuple. However, it will raise a TypeError

::

    >>> matrix = [
    [1, 2, "Lizards"],
    [4, "Potahtoes", 6]
    ]
    >>> my_function(matrix)
    TypeError: div must be a number

Different Row Lengths
=====================

Because ``/`` is not defined on defined on rows of differing length
``matrix_divided()`` will not work. HOwever, it will raise a TypeError
::    >>> matrix = [
    [1, 2, 3, 7],
    [4, 5, 6]
    ]
    >>> my_function(matrix)
    TypeError: Each row of the matrix must have the same size

Zero Division
=============

Because ``/`` is not defined onzero, ``matrix_divided()`` will not
work if one of th ematrix elements is zero. It will raise a
zeroDivisionError

::  
    >>> matrix = [
    [1, 2, 3],
    [4, 5, 0]
    ]
    >>> my_function(matrix)
    ZeroDivisionError: division by zero
(END)
