===============================
 How to Use 0-add_integer.py
===============================

This library is very simple, since it only has one function called
``add_integer()``.

Numbers
=======

``add_integer()`` returns the sum of its arguments.  For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__("0-add_integer").add_integer
    >>> add_integer(2, 3)
    5
    >>> add_integer(1, -2)
    -1

It also works with floating-point values

::

    >>> add_integer(2.0, -3)
    -1


Non-Numbers
===========

Because ``+`` is also defined on data types other than numbers,
``add_integer()`` works just as well if one of the arguments is a
string, a list, or a tuple. However, it will raise a TypeError

::

    >>> add_integer('Hag', 3)
    Traceback (most recent call last):
        File "/tmp/correction/1140985379941512867367003646931981333693_5\
    /246/148028/0x07-python-test_driven_development/0-add_integer.py", line 23\
    ,in add_integer
        raise TypeError("a must be an integer")
    TypeError: a must be an integer

    >>> add_integer(6.2, 'Hello')
    TypeError: b must be an integer
